
import serial
import pygame
class App:
   
    
    def __init__(self, portName):
        pygame.init()
        self.portName = portName
        self.arduinoData = serial.Serial(self.portName, 9600)
        self.screen = pygame.display.set_mode((760, 575))
        self.icon = pygame.image.load(
            r'globe.png')
        pygame.display.set_icon(self.icon)

        self.logo = pygame.image.load(
            r'logo.png')
        self.logo = pygame.transform.scale(self.logo, (140, 120))

        self.b2 = pygame.image.load(
            r'b2.png')
        self.b2 = pygame.transform.scale(self.b2, (760, 600))

        plane_art = pygame.image.load(r'plane.png')
        
    # def servo(self, servoValues):
    #     self.arduinoData.write(str.encode(servoValues))

    # def int_finder(self, emptyAlpha, pos_x, pos_y):
    #     font = pygame.font.Font('freesansbold.ttf', 20)
    #     display = font.render(str(emptyAlpha[pos_x][pos_y]), True, (31, 28, 28))
    #     return self.screen.blit(display, ((pos_x * 30) + 35, (pos_y * 30) + 10))
    
    def background(self):
        self.screen.fill((5, 14, 57))
    def run(self):    
        pygame.draw.circle(self.screen, 'green', (260, 267), 255)
        # pygame.draw.circle(screen, 'blue', (630,410), 100)
        pygame.draw.circle(self.screen, 'blue', (260, 267), 250)

        rect = (10, 17, 600, 500)
        self.screen.blit(self.b2, (0, 0))

        pygame.draw.line(self.screen, 'red', (252, 259), (268, 275), 5)
        pygame.draw.line(self.screen, 'red', (252, 275), (268, 259), 5)

        pygame.draw.line(self.screen, 'black', (10, 267), (510, 267), 3)
        pygame.draw.line(self.screen, 'black', (260, 17), (260, 517), 3)

    def display_stat(self, stat, pos_x, pos_y):
        font = pygame.font.Font('freesansbold.ttf', 15)
        display = font.render(str(stat), True, 'white')
        return self.screen.blit(display, ((pos_x), (pos_y)))
    
    # def print_trajectory(self, emptyAlpha):
    #     font = pygame.font.Font('freesansbold.ttf', 20)
    #     for i in emptyAlpha:
    #         display = font.render(".", True, (255, 255, 0))
    #         self.screen.blit(display, (i[0] + 245, i[1] + 430))
    
    # def recieve_input(self, stringOutput):
    #     plane_lat = ""
    #     plane_lon = ""
    #     for x in range(len(stringOutput)):
    #         if stringOutput[x] == ',' or stringOutput[x] == ' ':
    #             for y in range(x + 1, len(stringOutput)):
    #                 plane_lon += (stringOutput[y])
    #             break
    #         plane_lat += stringOutput[x]
    #     return float(plane_lat), float(plane_lon)

    def meter(self, fill_till, pos_x, pos_y, surface):
        a = 120
        b = 25
        pygame.draw.rect(surface, 'blue', (pos_x, pos_y, a, b))
        pygame.draw.rect(surface, 'green', (pos_x + 5, pos_y + 5, a - 10, b - 10))
        pygame.draw.rect(surface, (255, 255 - fill_till * 2, 0), (pos_x + 5, pos_y + 5, fill_till, 15))
    
    # # def plane_rotation(self, bearing_angle, rotation):
    # #     if bearing_angle < 0:
    # #         bearing_angle += 360.0
    # #     bearing_angle = int(bearing_angle) % 360
    # #     bearing_angle //= 15
    # #     return rotation[rotate_180 - bearing_angle]
    
    # # def calcDist(self, latit1, longit1, lat2, lon2):
    # #     # This portion converts the current and destination GPS coords from decDegrees to Radians String
    # #     lonR1 = longit1 * (PI / 180)
    # #     lonR2 = lon2 * (PI / 180)
    # #     latR1 = latit1 * (PI / 180)
    # #     latR2 = lat2 * (PI / 180)

    # #     # the differences lattitude and longitudes in Radians
    # #     dlon = lonR2 - lonR1
    # #     dlat = latR2 - latR1

    # #     # Haversine Formula to calculate the distance between two latitude and longitude vales
    # #     a = ((math.sin(dlat / 2)) ** 2) + math.cos(latR1) * math.cos(latR2) * ((math.sin(dlon / 2)) ** 2)
    # #     e = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    # #     d = R * e

    # #     m = d * 1000  # convert to meters

    # #     # Haversine Formula to find the bearing angle between the destination and current position
    # #     x = math.cos(latR2) * math.sin(lonR2 - lonR1)  # calculate x
    # #     y = math.cos(latR1) * math.sin(latR2) - math.sin(latR1) * math.cos(latR2) * math.cos(lonR2 - lonR1)  # calculate y
    # #     brRad = math.atan2(x, y)  # return atan2 result for bearing. Result at this point is in Radians
    # #     reqBear = toDegrees * brRad  # convert to degrees

    # #     return x * scale_graph, y * scale_graph, round(reqBear, 2), round(m, 2)

    def start(self):
        pygame.display.set_caption("Plane Visualizer")

    
    